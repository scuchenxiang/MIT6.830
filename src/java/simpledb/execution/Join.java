package simpledb.execution;

import simpledb.common.Type;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private Tuple left;
    private Tuple right;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p=p;
        this.child1=child1;
        this.child2=child2;
        this.left=null;
        this.left=null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc tupleDesc1=child1.getTupleDesc();
        TupleDesc tupleDesc2=child2.getTupleDesc();
        Type [] types=new Type[tupleDesc1.numFields()+tupleDesc2.numFields()];
        String[] names=new String[tupleDesc1.numFields()+tupleDesc2.numFields()];
        for(int i=0;i<tupleDesc1.numFields();i++)
        {
            types[i]=tupleDesc1.getFieldType(i);
            names[i]=tupleDesc1.getFieldName(i);
        }
        for(int i=0;i<tupleDesc2.numFields();i++)
        {
            types[i+tupleDesc1.numFields()]=tupleDesc2.getFieldType(i);
            names[i+tupleDesc1.numFields()]=tupleDesc2.getFieldName(i);
        }
        return new TupleDesc(types,names);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();
        if(child1.hasNext())
            left=child1.next();
        if (child2.hasNext())
            right=child2.next();
    }

    public void close() {
        // some code goes here
        left=null;
        right=null;
        child1.close();
        child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.close();
        this.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while (left!=null||right!=null)
        {//first get the res, then update left and right
            Tuple res=null;
            if(p.filter(left,right))
            {
                res=new Tuple(this.getTupleDesc());
                for(int i=0;i<left.getTupleDesc().numFields();i++)
                {
                    res.setField(i,left.getField(i));
                }
                for(int i=0;i<right.getTupleDesc().numFields();i++)
                {
                    res.setField(i+left.getTupleDesc().numFields(),right.getField(i));
                }
            }
            if(child2.hasNext())
            {
                right=child2.next();
            }
            else
            {
                if(child1.hasNext())
                {
                    left=child1.next();
                    child2.rewind();
                    if(child2.hasNext())
                        right=child2.next();
                }
                else
                {
                    left=null;
                    right=null;
                }
            }
            if(res!=null)
                return res;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{child1,child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.child1=children[0];
        this.child2=children[1];
    }

}
